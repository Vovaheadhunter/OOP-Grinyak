// Описать класс для хранения данных (контейнер). Данные должны храниться,
// например, в виде массива. Класс должен включать в себя функции добавления данных,
// удаления данных, вывода данных на консоль ( info() ). Реализовать итератор для перебора
// данных контейнера так, чтобы он перебирал элементы в порядке их добавления,
// игнорируя элементы, нарушающие порядок по возрастанию. То есть если следующие
// элемент меньше предыдущего, то итератор возвращает не его, а пытается найти
// следующий не меньший по значению элемент. Итератор должен быть двунаправленным.
// Продемонстрировать работу шаблона на объектах как встроенного типа, так и
// собственного класса. Для этого создать собственный класс и перегрузить в нём нужные
// функции-операции.


#include "store.h"


int main() {
    Store<float, 20> s1;
    s1.add(1.1);
    s1.add(4.1);
    s1.add(2.0);
    s1.add(3);
    s1.add(5);
    s1.add(7);
    s1.add(6);
    s1.add(8);
    s1.add(10);
    s1.add(11);
    s1.add(12);
    s1.add(7);
    s1.add(9);
    s1.add(5);
    s1.add(3);
    s1.add(2);
    s1.add(4);
    s1.add(1);


    std::cout << "Forward iteration:\n";
    for (auto it = s1.begin(); it != s1.end(); ++it) {
        std::cout << *it << "\n";
    }


    std::cout << "\nReverse iteration:\n";
    for (auto it = s1.last(); it != s1.begin(); --it) {
        std::cout << *it << "\n";
    }


    return 0;
}




